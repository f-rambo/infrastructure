// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: internal/biz/cluster.proto

package biz

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterType int32

const (
	ClusterType_ClusterType_UNSPECIFIED ClusterType = 0
	ClusterType_LOCAL                   ClusterType = 1
	ClusterType_AWS                     ClusterType = 2
	ClusterType_ALICLOUD                ClusterType = 3
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "ClusterType_UNSPECIFIED",
		1: "LOCAL",
		2: "AWS",
		3: "ALICLOUD",
	}
	ClusterType_value = map[string]int32{
		"ClusterType_UNSPECIFIED": 0,
		"LOCAL":                   1,
		"AWS":                     2,
		"ALICLOUD":                3,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[0].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[0]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{0}
}

type ClusterStatus int32

const (
	ClusterStatus_UNSPECIFIED ClusterStatus = 0
	ClusterStatus_RUNNING     ClusterStatus = 1
	ClusterStatus_DELETED     ClusterStatus = 2
	ClusterStatus_STARTING    ClusterStatus = 3
	ClusterStatus_STOPPING    ClusterStatus = 4
	ClusterStatus_STOPPED     ClusterStatus = 5
)

// Enum value maps for ClusterStatus.
var (
	ClusterStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "RUNNING",
		2: "DELETED",
		3: "STARTING",
		4: "STOPPING",
		5: "STOPPED",
	}
	ClusterStatus_value = map[string]int32{
		"UNSPECIFIED": 0,
		"RUNNING":     1,
		"DELETED":     2,
		"STARTING":    3,
		"STOPPING":    4,
		"STOPPED":     5,
	}
)

func (x ClusterStatus) Enum() *ClusterStatus {
	p := new(ClusterStatus)
	*p = x
	return p
}

func (x ClusterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[1].Descriptor()
}

func (ClusterStatus) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[1]
}

func (x ClusterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterStatus.Descriptor instead.
func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{1}
}

type ClusterLevel int32

const (
	ClusterLevel_ClusterLevel_UNSPECIFIED ClusterLevel = 0
	ClusterLevel_BASIC                    ClusterLevel = 1
	ClusterLevel_STANDARD                 ClusterLevel = 2
	ClusterLevel_ADVANCED                 ClusterLevel = 3
)

// Enum value maps for ClusterLevel.
var (
	ClusterLevel_name = map[int32]string{
		0: "ClusterLevel_UNSPECIFIED",
		1: "BASIC",
		2: "STANDARD",
		3: "ADVANCED",
	}
	ClusterLevel_value = map[string]int32{
		"ClusterLevel_UNSPECIFIED": 0,
		"BASIC":                    1,
		"STANDARD":                 2,
		"ADVANCED":                 3,
	}
)

func (x ClusterLevel) Enum() *ClusterLevel {
	p := new(ClusterLevel)
	*p = x
	return p
}

func (x ClusterLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[2].Descriptor()
}

func (ClusterLevel) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[2]
}

func (x ClusterLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterLevel.Descriptor instead.
func (ClusterLevel) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{2}
}

type NodeRole int32

const (
	NodeRole_NodeRole_UNSPECIFIED NodeRole = 0
	NodeRole_MASTER               NodeRole = 1
	NodeRole_WORKER               NodeRole = 2
	NodeRole_EDGE                 NodeRole = 3
)

// Enum value maps for NodeRole.
var (
	NodeRole_name = map[int32]string{
		0: "NodeRole_UNSPECIFIED",
		1: "MASTER",
		2: "WORKER",
		3: "EDGE",
	}
	NodeRole_value = map[string]int32{
		"NodeRole_UNSPECIFIED": 0,
		"MASTER":               1,
		"WORKER":               2,
		"EDGE":                 3,
	}
)

func (x NodeRole) Enum() *NodeRole {
	p := new(NodeRole)
	*p = x
	return p
}

func (x NodeRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeRole) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[3].Descriptor()
}

func (NodeRole) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[3]
}

func (x NodeRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeRole.Descriptor instead.
func (NodeRole) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{3}
}

type NodeStatus int32

const (
	NodeStatus_NodeStatus_UNSPECIFIED NodeStatus = 0
	NodeStatus_NODE_UNSPECIFIED       NodeStatus = 1
	NodeStatus_NODE_RUNNING           NodeStatus = 2
	NodeStatus_NODE_CREATING          NodeStatus = 3
	NodeStatus_NODE_DELETING          NodeStatus = 4
	NodeStatus_NODE_DELETED           NodeStatus = 5
	NodeStatus_NODE_ERROR             NodeStatus = 6
	NodeStatus_NODE_PENDING           NodeStatus = 7
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "NodeStatus_UNSPECIFIED",
		1: "NODE_UNSPECIFIED",
		2: "NODE_RUNNING",
		3: "NODE_CREATING",
		4: "NODE_DELETING",
		5: "NODE_DELETED",
		6: "NODE_ERROR",
		7: "NODE_PENDING",
	}
	NodeStatus_value = map[string]int32{
		"NodeStatus_UNSPECIFIED": 0,
		"NODE_UNSPECIFIED":       1,
		"NODE_RUNNING":           2,
		"NODE_CREATING":          3,
		"NODE_DELETING":          4,
		"NODE_DELETED":           5,
		"NODE_ERROR":             6,
		"NODE_PENDING":           7,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[4].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[4]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{4}
}

type NodeGroupType int32

const (
	NodeGroupType_NodeGroupType_UNSPECIFIED NodeGroupType = 0
	NodeGroupType_NORMAL                    NodeGroupType = 1
	NodeGroupType_HIGH_COMPUTATION          NodeGroupType = 2
	NodeGroupType_GPU_ACCELERATERD          NodeGroupType = 3
	NodeGroupType_HIGH_MEMORY               NodeGroupType = 4
	NodeGroupType_LARGE_HARD_DISK           NodeGroupType = 5
)

// Enum value maps for NodeGroupType.
var (
	NodeGroupType_name = map[int32]string{
		0: "NodeGroupType_UNSPECIFIED",
		1: "NORMAL",
		2: "HIGH_COMPUTATION",
		3: "GPU_ACCELERATERD",
		4: "HIGH_MEMORY",
		5: "LARGE_HARD_DISK",
	}
	NodeGroupType_value = map[string]int32{
		"NodeGroupType_UNSPECIFIED": 0,
		"NORMAL":                    1,
		"HIGH_COMPUTATION":          2,
		"GPU_ACCELERATERD":          3,
		"HIGH_MEMORY":               4,
		"LARGE_HARD_DISK":           5,
	}
)

func (x NodeGroupType) Enum() *NodeGroupType {
	p := new(NodeGroupType)
	*p = x
	return p
}

func (x NodeGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[5].Descriptor()
}

func (NodeGroupType) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[5]
}

func (x NodeGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeGroupType.Descriptor instead.
func (NodeGroupType) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{5}
}

type NodeArchType int32

const (
	NodeArchType_NodeArchType_UNSPECIFIED NodeArchType = 0
	NodeArchType_AMD64                    NodeArchType = 1
	NodeArchType_ARM64                    NodeArchType = 2
)

// Enum value maps for NodeArchType.
var (
	NodeArchType_name = map[int32]string{
		0: "NodeArchType_UNSPECIFIED",
		1: "AMD64",
		2: "ARM64",
	}
	NodeArchType_value = map[string]int32{
		"NodeArchType_UNSPECIFIED": 0,
		"AMD64":                    1,
		"ARM64":                    2,
	}
)

func (x NodeArchType) Enum() *NodeArchType {
	p := new(NodeArchType)
	*p = x
	return p
}

func (x NodeArchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeArchType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[6].Descriptor()
}

func (NodeArchType) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[6]
}

func (x NodeArchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeArchType.Descriptor instead.
func (NodeArchType) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{6}
}

type NodeGPUSpec int32

const (
	NodeGPUSpec_NodeGPUSpec_UNSPECIFIED NodeGPUSpec = 0
	NodeGPUSpec_NVIDIA_A10              NodeGPUSpec = 1
	NodeGPUSpec_NVIDIA_V100             NodeGPUSpec = 2
	NodeGPUSpec_NVIDIA_T4               NodeGPUSpec = 3
	NodeGPUSpec_NVIDIA_P100             NodeGPUSpec = 4
	NodeGPUSpec_NVIDIA_P4               NodeGPUSpec = 5
)

// Enum value maps for NodeGPUSpec.
var (
	NodeGPUSpec_name = map[int32]string{
		0: "NodeGPUSpec_UNSPECIFIED",
		1: "NVIDIA_A10",
		2: "NVIDIA_V100",
		3: "NVIDIA_T4",
		4: "NVIDIA_P100",
		5: "NVIDIA_P4",
	}
	NodeGPUSpec_value = map[string]int32{
		"NodeGPUSpec_UNSPECIFIED": 0,
		"NVIDIA_A10":              1,
		"NVIDIA_V100":             2,
		"NVIDIA_T4":               3,
		"NVIDIA_P100":             4,
		"NVIDIA_P4":               5,
	}
)

func (x NodeGPUSpec) Enum() *NodeGPUSpec {
	p := new(NodeGPUSpec)
	*p = x
	return p
}

func (x NodeGPUSpec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeGPUSpec) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[7].Descriptor()
}

func (NodeGPUSpec) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[7]
}

func (x NodeGPUSpec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeGPUSpec.Descriptor instead.
func (NodeGPUSpec) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{7}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	ResourceType_VPC                       ResourceType = 1
	ResourceType_SUBNET                    ResourceType = 2
	ResourceType_INTERNET_GATEWAY          ResourceType = 3
	ResourceType_NAT_GATEWAY               ResourceType = 4
	ResourceType_ROUTE_TABLE               ResourceType = 5
	ResourceType_SECURITY_GROUP            ResourceType = 6
	ResourceType_LOAD_BALANCER             ResourceType = 7
	ResourceType_ELASTIC_IP                ResourceType = 8
	ResourceType_AVAILABILITY_ZONES        ResourceType = 9
	ResourceType_KEY_PAIR                  ResourceType = 10
	ResourceType_VPC_ENDPOINT_S3           ResourceType = 11
	ResourceType_DATA_DEVICE               ResourceType = 12
	ResourceType_INSTANCE                  ResourceType = 13
	ResourceType_REGION                    ResourceType = 14
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0:  "RESOURCE_TYPE_UNSPECIFIED",
		1:  "VPC",
		2:  "SUBNET",
		3:  "INTERNET_GATEWAY",
		4:  "NAT_GATEWAY",
		5:  "ROUTE_TABLE",
		6:  "SECURITY_GROUP",
		7:  "LOAD_BALANCER",
		8:  "ELASTIC_IP",
		9:  "AVAILABILITY_ZONES",
		10: "KEY_PAIR",
		11: "VPC_ENDPOINT_S3",
		12: "DATA_DEVICE",
		13: "INSTANCE",
		14: "REGION",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"VPC":                       1,
		"SUBNET":                    2,
		"INTERNET_GATEWAY":          3,
		"NAT_GATEWAY":               4,
		"ROUTE_TABLE":               5,
		"SECURITY_GROUP":            6,
		"LOAD_BALANCER":             7,
		"ELASTIC_IP":                8,
		"AVAILABILITY_ZONES":        9,
		"KEY_PAIR":                  10,
		"VPC_ENDPOINT_S3":           11,
		"DATA_DEVICE":               12,
		"INSTANCE":                  13,
		"REGION":                    14,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[8].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[8]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{8}
}

type ResourceTypeKeyValue int32

const (
	ResourceTypeKeyValue_ResourceTypeKeyValue_UNSPECIFIED ResourceTypeKeyValue = 0
	ResourceTypeKeyValue_NAME                             ResourceTypeKeyValue = 1
	ResourceTypeKeyValue_ACCESS                           ResourceTypeKeyValue = 2
	ResourceTypeKeyValue_ZONE_ID                          ResourceTypeKeyValue = 3
	ResourceTypeKeyValue_REGION_ID                        ResourceTypeKeyValue = 4
	ResourceTypeKeyValue_ACCESS_PRIVATE                   ResourceTypeKeyValue = 5
	ResourceTypeKeyValue_ACCESS_PUBLIC                    ResourceTypeKeyValue = 6
)

// Enum value maps for ResourceTypeKeyValue.
var (
	ResourceTypeKeyValue_name = map[int32]string{
		0: "ResourceTypeKeyValue_UNSPECIFIED",
		1: "NAME",
		2: "ACCESS",
		3: "ZONE_ID",
		4: "REGION_ID",
		5: "ACCESS_PRIVATE",
		6: "ACCESS_PUBLIC",
	}
	ResourceTypeKeyValue_value = map[string]int32{
		"ResourceTypeKeyValue_UNSPECIFIED": 0,
		"NAME":                             1,
		"ACCESS":                           2,
		"ZONE_ID":                          3,
		"REGION_ID":                        4,
		"ACCESS_PRIVATE":                   5,
		"ACCESS_PUBLIC":                    6,
	}
)

func (x ResourceTypeKeyValue) Enum() *ResourceTypeKeyValue {
	p := new(ResourceTypeKeyValue)
	*p = x
	return p
}

func (x ResourceTypeKeyValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeKeyValue) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[9].Descriptor()
}

func (ResourceTypeKeyValue) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[9]
}

func (x ResourceTypeKeyValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeKeyValue.Descriptor instead.
func (ResourceTypeKeyValue) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{9}
}

type IngressControllerRuleAccess int32

const (
	IngressControllerRuleAccess_IngressControllerRuleAccess_UNSPECIFIED IngressControllerRuleAccess = 0
	IngressControllerRuleAccess_PRIVATE                                 IngressControllerRuleAccess = 1
	IngressControllerRuleAccess_PUBLIC                                  IngressControllerRuleAccess = 2
)

// Enum value maps for IngressControllerRuleAccess.
var (
	IngressControllerRuleAccess_name = map[int32]string{
		0: "IngressControllerRuleAccess_UNSPECIFIED",
		1: "PRIVATE",
		2: "PUBLIC",
	}
	IngressControllerRuleAccess_value = map[string]int32{
		"IngressControllerRuleAccess_UNSPECIFIED": 0,
		"PRIVATE": 1,
		"PUBLIC":  2,
	}
)

func (x IngressControllerRuleAccess) Enum() *IngressControllerRuleAccess {
	p := new(IngressControllerRuleAccess)
	*p = x
	return p
}

func (x IngressControllerRuleAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngressControllerRuleAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_biz_cluster_proto_enumTypes[10].Descriptor()
}

func (IngressControllerRuleAccess) Type() protoreflect.EnumType {
	return &file_internal_biz_cluster_proto_enumTypes[10]
}

func (x IngressControllerRuleAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngressControllerRuleAccess.Descriptor instead.
func (IngressControllerRuleAccess) EnumDescriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{10}
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @goimport: "gorm.io/gorm"
	// @gofield: gorm.Model
	Id                     int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                         // @gotags: gorm:"column:id;primaryKey;AUTO_INCREMENT"
	Name                   string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                      // @gotags: gorm:"column:name; default:''; NOT NULL"
	Version                string                   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                                                // @gotags: gorm:"column:version; default:''; NOT NULL"
	ApiServerAddress       string                   `protobuf:"bytes,4,opt,name=api_server_address,json=apiServerAddress,proto3" json:"api_server_address,omitempty"`                    // @gotags: gorm:"column:api_server_address; default:''; NOT NULL"
	Config                 string                   `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`                                                                  // @gotags: gorm:"column:config; default:''; NOT NULL"
	Status                 ClusterStatus            `protobuf:"varint,6,opt,name=status,proto3,enum=biz.cluster.ClusterStatus" json:"status,omitempty"`                                  // @gotags: gorm:"column:status; default:0; NOT NULL"
	Type                   ClusterType              `protobuf:"varint,7,opt,name=type,proto3,enum=biz.cluster.ClusterType" json:"type,omitempty"`                                        // @gotags: gorm:"column:type; default:0; NOT NULL"
	Level                  ClusterLevel             `protobuf:"varint,8,opt,name=level,proto3,enum=biz.cluster.ClusterLevel" json:"level,omitempty"`                                     // @gotags: gorm:"column:level; default:0; NOT NULL"
	PublicKey              string                   `protobuf:"bytes,9,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`                                           // @gotags: gorm:"column:public_key; default:''; NOT NULL"
	PrivateKey             string                   `protobuf:"bytes,10,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`                                       // @gotags: gorm:"column:private_key; default:''; NOT NULL"
	Region                 string                   `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`                                                                 // @gotags: gorm:"column:region; default:''; NOT NULL"
	UserId                 int64                    `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                  // @gotags: gorm:"column:user_id; default:0; NOT NULL"
	AccessId               string                   `protobuf:"bytes,13,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`                                             // @gotags: gorm:"column:access_id; default:''; NOT NULL"
	AccessKey              string                   `protobuf:"bytes,14,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`                                          // @gotags: gorm:"column:access_key; default:''; NOT NULL"
	Token                  string                   `protobuf:"bytes,15,opt,name=token,proto3" json:"token,omitempty"`                                                                   // @gotags: gorm:"column:token; default:''; NOT NULL"
	CaData                 string                   `protobuf:"bytes,16,opt,name=ca_data,json=caData,proto3" json:"ca_data,omitempty"`                                                   // @gotags: gorm:"column:ca_data; default:''; NOT NULL"
	CertData               string                   `protobuf:"bytes,17,opt,name=cert_data,json=certData,proto3" json:"cert_data,omitempty"`                                             // @gotags: gorm:"column:cert_data; default:''; NOT NULL"
	KeyData                string                   `protobuf:"bytes,18,opt,name=key_data,json=keyData,proto3" json:"key_data,omitempty"`                                                // @gotags: gorm:"column:key_data; default:''; NOT NULL"
	Nodes                  []*Node                  `protobuf:"bytes,19,rep,name=nodes,proto3" json:"nodes,omitempty"`                                                                   // @gotags: gorm:"-"
	NodeGroups             []*NodeGroup             `protobuf:"bytes,20,rep,name=node_groups,json=nodeGroups,proto3" json:"node_groups,omitempty"`                                       // @gotags: gorm:"-"
	CloudResources         []*CloudResource         `protobuf:"bytes,21,rep,name=cloud_resources,json=cloudResources,proto3" json:"cloud_resources,omitempty"`                           // @gotags: gorm:"-"
	IngressControllerRules []*IngressControllerRule `protobuf:"bytes,22,rep,name=ingress_controller_rules,json=ingressControllerRules,proto3" json:"ingress_controller_rules,omitempty"` // @gotags: gorm:"-"
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_biz_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_internal_biz_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Cluster) GetApiServerAddress() string {
	if x != nil {
		return x.ApiServerAddress
	}
	return ""
}

func (x *Cluster) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Cluster) GetStatus() ClusterStatus {
	if x != nil {
		return x.Status
	}
	return ClusterStatus_UNSPECIFIED
}

func (x *Cluster) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_ClusterType_UNSPECIFIED
}

func (x *Cluster) GetLevel() ClusterLevel {
	if x != nil {
		return x.Level
	}
	return ClusterLevel_ClusterLevel_UNSPECIFIED
}

func (x *Cluster) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Cluster) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *Cluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Cluster) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Cluster) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *Cluster) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Cluster) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cluster) GetCaData() string {
	if x != nil {
		return x.CaData
	}
	return ""
}

func (x *Cluster) GetCertData() string {
	if x != nil {
		return x.CertData
	}
	return ""
}

func (x *Cluster) GetKeyData() string {
	if x != nil {
		return x.KeyData
	}
	return ""
}

func (x *Cluster) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Cluster) GetNodeGroups() []*NodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

func (x *Cluster) GetCloudResources() []*CloudResource {
	if x != nil {
		return x.CloudResources
	}
	return nil
}

func (x *Cluster) GetIngressControllerRules() []*IngressControllerRule {
	if x != nil {
		return x.IngressControllerRules
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @goimport: "gorm.io/gorm"
	// @gofield: gorm.Model
	Id           int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         // @gotags: gorm:"column:id;primaryKey;AUTO_INCREMENT"
	Name         string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      // @gotags: gorm:"column:name; default:''; NOT NULL"
	Labels       string     `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`                                  // @gotags: gorm:"column:labels; default:''; NOT NULL"
	Ip           string     `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                                          // @gotags: gorm:"column:ip; default:''; NOT NULL"
	User         string     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`                                      // @gotags: gorm:"column:user; default:''; NOT NULL"
	Role         NodeRole   `protobuf:"varint,6,opt,name=role,proto3,enum=biz.cluster.NodeRole" json:"role,omitempty"`           // @gotags: gorm:"column:role; default:0; NOT NULL"
	Status       NodeStatus `protobuf:"varint,7,opt,name=status,proto3,enum=biz.cluster.NodeStatus" json:"status,omitempty"`     // @gotags: gorm:"column:status; default:0; NOT NULL"
	InstanceId   string     `protobuf:"bytes,8,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`        // @gotags: gorm:"column:instance_id; default:''; NOT NULL"
	ImageId      string     `protobuf:"bytes,9,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`                 // @gotags: gorm:"column:image_id; default:''; NOT NULL"
	InstanceType string     `protobuf:"bytes,10,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"` // @gotags: gorm:"column:instance_type; default:''; NOT NULL"
	ClusterId    int64      `protobuf:"varint,11,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`         // @gotags: gorm:"column:cluster_id; default:0; NOT NULL"
	NodeGroupId  string     `protobuf:"bytes,12,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`  // @gotags: gorm:"column:node_group_id; default:''; NOT NULL"
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_biz_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_internal_biz_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *Node) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Node) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Node) GetRole() NodeRole {
	if x != nil {
		return x.Role
	}
	return NodeRole_NodeRole_UNSPECIFIED
}

func (x *Node) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_NodeStatus_UNSPECIFIED
}

func (x *Node) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Node) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *Node) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *Node) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *Node) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

type NodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @goimport: "gorm.io/gorm"
	// @gofield: gorm.Model
	Id             string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // @gotags: gorm:"column:id;primaryKey; NOT NULL"
	Name           string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                    // @gotags: gorm:"column:name; default:''; NOT NULL"
	Type           NodeGroupType `protobuf:"varint,3,opt,name=type,proto3,enum=biz.cluster.NodeGroupType" json:"type,omitempty"`                    // @gotags: gorm:"column:type; default:0; NOT NULL"
	Os             string        `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`                                                        // @gotags: gorm:"column:os; default:''; NOT NULL"
	Arch           NodeArchType  `protobuf:"varint,5,opt,name=arch,proto3,enum=biz.cluster.NodeArchType" json:"arch,omitempty"`                     // @gotags: gorm:"column:arch; default:0; NOT NULL"
	Cpu            int32         `protobuf:"varint,6,opt,name=cpu,proto3" json:"cpu,omitempty"`                                                     // @gotags: gorm:"column:cpu; default:0; NOT NULL"
	Memory         int32         `protobuf:"varint,7,opt,name=memory,proto3" json:"memory,omitempty"`                                               // @gotags: gorm:"column:memory; default:0; NOT NULL"
	Gpu            int32         `protobuf:"varint,8,opt,name=gpu,proto3" json:"gpu,omitempty"`                                                     // @gotags: gorm:"column:gpu; default:0; NOT NULL"
	GpuSpec        NodeGPUSpec   `protobuf:"varint,9,opt,name=gpu_spec,json=gpuSpec,proto3,enum=biz.cluster.NodeGPUSpec" json:"gpu_spec,omitempty"` // @gotags: gorm:"column:gpu_spec; default:0; NOT NULL"
	SystemDiskSize int32         `protobuf:"varint,10,opt,name=system_disk_size,json=systemDiskSize,proto3" json:"system_disk_size,omitempty"`      // @gotags: gorm:"column:system_disk_size; default:0; NOT NULL"
	DataDiskSize   int32         `protobuf:"varint,11,opt,name=data_disk_size,json=dataDiskSize,proto3" json:"data_disk_size,omitempty"`            // @gotags: gorm:"column:data_disk_size; default:0; NOT NULL"
	MinSize        int32         `protobuf:"varint,12,opt,name=min_size,json=minSize,proto3" json:"min_size,omitempty"`                             // @gotags: gorm:"column:min_size; default:0; NOT NULL"
	MaxSize        int32         `protobuf:"varint,13,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`                             // @gotags: gorm:"column:max_size; default:0; NOT NULL"
	TargetSize     int32         `protobuf:"varint,14,opt,name=target_size,json=targetSize,proto3" json:"target_size,omitempty"`                    // @gotags: gorm:"column:target_size; default:0; NOT NULL"
	NodePrice      float32       `protobuf:"fixed32,15,opt,name=node_price,json=nodePrice,proto3" json:"node_price,omitempty"`                      // @gotags: gorm:"column:node_price; default:0; NOT NULL"
	PodPrice       float32       `protobuf:"fixed32,16,opt,name=pod_price,json=podPrice,proto3" json:"pod_price,omitempty"`                         // @gotags: gorm:"column:pod_price; default:0; NOT NULL"
	SubnetIpCidr   string        `protobuf:"bytes,17,opt,name=subnet_ip_cidr,json=subnetIpCidr,proto3" json:"subnet_ip_cidr,omitempty"`             // @gotags: gorm:"column:subnet_ip_cidr; default:''; NOT NULL"
	PodIpCidr      string        `protobuf:"bytes,18,opt,name=pod_ip_cidr,json=podIpCidr,proto3" json:"pod_ip_cidr,omitempty"`                      // @gotags: gorm:"column:pod_ip_cidr; default:''; NOT NULL"
	ClusterId      int64         `protobuf:"varint,19,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`                       // @gotags: gorm:"column:cluster_id; default:0; NOT NULL"
}

func (x *NodeGroup) Reset() {
	*x = NodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_biz_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroup) ProtoMessage() {}

func (x *NodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_internal_biz_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroup.ProtoReflect.Descriptor instead.
func (*NodeGroup) Descriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *NodeGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeGroup) GetType() NodeGroupType {
	if x != nil {
		return x.Type
	}
	return NodeGroupType_NodeGroupType_UNSPECIFIED
}

func (x *NodeGroup) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *NodeGroup) GetArch() NodeArchType {
	if x != nil {
		return x.Arch
	}
	return NodeArchType_NodeArchType_UNSPECIFIED
}

func (x *NodeGroup) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *NodeGroup) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *NodeGroup) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *NodeGroup) GetGpuSpec() NodeGPUSpec {
	if x != nil {
		return x.GpuSpec
	}
	return NodeGPUSpec_NodeGPUSpec_UNSPECIFIED
}

func (x *NodeGroup) GetSystemDiskSize() int32 {
	if x != nil {
		return x.SystemDiskSize
	}
	return 0
}

func (x *NodeGroup) GetDataDiskSize() int32 {
	if x != nil {
		return x.DataDiskSize
	}
	return 0
}

func (x *NodeGroup) GetMinSize() int32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *NodeGroup) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *NodeGroup) GetTargetSize() int32 {
	if x != nil {
		return x.TargetSize
	}
	return 0
}

func (x *NodeGroup) GetNodePrice() float32 {
	if x != nil {
		return x.NodePrice
	}
	return 0
}

func (x *NodeGroup) GetPodPrice() float32 {
	if x != nil {
		return x.PodPrice
	}
	return 0
}

func (x *NodeGroup) GetSubnetIpCidr() string {
	if x != nil {
		return x.SubnetIpCidr
	}
	return ""
}

func (x *NodeGroup) GetPodIpCidr() string {
	if x != nil {
		return x.PodIpCidr
	}
	return ""
}

func (x *NodeGroup) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type CloudResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @goimport: "gorm.io/gorm"
	// @gofield: gorm.Model
	Id           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // @gotags: gorm:"column:id;primaryKey; NOT NULL"
	Name         string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                     // @gotags: gorm:"column:name; default:''; NOT NULL"
	RefId        string           `protobuf:"bytes,3,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`                      // @gotags: gorm:"column:ref_id; default:''; NOT NULL"
	AssociatedId string           `protobuf:"bytes,4,opt,name=associated_id,json=associatedId,proto3" json:"associated_id,omitempty"` // @gotags: gorm:"column:associated_id; default:''; NOT NULL"
	Type         ResourceType     `protobuf:"varint,5,opt,name=type,proto3,enum=biz.cluster.ResourceType" json:"type,omitempty"`      // @gotags: gorm:"column:type; default:0; NOT NULL"
	Tags         string           `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`                                     // @gotags: gorm:"column:tags; default:''; NOT NULL"
	Value        string           `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`                                   // @gotags: gorm:"column:value; default:''; NOT NULL"
	SubResources []*CloudResource `protobuf:"bytes,8,rep,name=sub_resources,json=subResources,proto3" json:"sub_resources,omitempty"` // @gotags: gorm:"-"
	ClusterId    int64            `protobuf:"varint,9,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`         // @gotags: gorm:"column:cluster_id; default:0; NOT NULL"
	ParentId     string           `protobuf:"bytes,10,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`            // @gotags: gorm:"column:parent_id; default:''; NOT NULL"
}

func (x *CloudResource) Reset() {
	*x = CloudResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_biz_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResource) ProtoMessage() {}

func (x *CloudResource) ProtoReflect() protoreflect.Message {
	mi := &file_internal_biz_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResource.ProtoReflect.Descriptor instead.
func (*CloudResource) Descriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *CloudResource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResource) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *CloudResource) GetAssociatedId() string {
	if x != nil {
		return x.AssociatedId
	}
	return ""
}

func (x *CloudResource) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *CloudResource) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *CloudResource) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CloudResource) GetSubResources() []*CloudResource {
	if x != nil {
		return x.SubResources
	}
	return nil
}

func (x *CloudResource) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CloudResource) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type IngressControllerRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @goimport: "gorm.io/gorm"
	// @gofield: gorm.Model
	Id          string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                       // @gotags: gorm:"column:id;primaryKey; NOT NULL"
	Name        string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                   // @gotags: gorm:"column:name; default:''; NOT NULL"
	Description string                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                     // @gotags: gorm:"column:description; default:''; NOT NULL"
	VpcId       string                      `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`                                    // @gotags: gorm:"column:vpc_id; default:''; NOT NULL"
	StartPort   int32                       `protobuf:"varint,5,opt,name=start_port,json=startPort,proto3" json:"start_port,omitempty"`                       // @gotags: gorm:"column:start_port; default:0; NOT NULL"
	EndPort     int32                       `protobuf:"varint,6,opt,name=end_port,json=endPort,proto3" json:"end_port,omitempty"`                             // @gotags: gorm:"column:end_port; default:0; NOT NULL"
	Protocol    string                      `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`                                           // @gotags: gorm:"column:protocol; default:''; NOT NULL"
	IpCidr      string                      `protobuf:"bytes,8,opt,name=ip_cidr,json=ipCidr,proto3" json:"ip_cidr,omitempty"`                                 // @gotags: gorm:"column:ip_cidr; default:''; NOT NULL"
	Access      IngressControllerRuleAccess `protobuf:"varint,9,opt,name=access,proto3,enum=biz.cluster.IngressControllerRuleAccess" json:"access,omitempty"` // @gotags: gorm:"column:access; default:0; NOT NULL"
	ClusterId   int64                       `protobuf:"varint,10,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`                      // @gotags: gorm:"column:cluster_id; default:0; NOT NULL"
}

func (x *IngressControllerRule) Reset() {
	*x = IngressControllerRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_biz_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressControllerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressControllerRule) ProtoMessage() {}

func (x *IngressControllerRule) ProtoReflect() protoreflect.Message {
	mi := &file_internal_biz_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressControllerRule.ProtoReflect.Descriptor instead.
func (*IngressControllerRule) Descriptor() ([]byte, []int) {
	return file_internal_biz_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *IngressControllerRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IngressControllerRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IngressControllerRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IngressControllerRule) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *IngressControllerRule) GetStartPort() int32 {
	if x != nil {
		return x.StartPort
	}
	return 0
}

func (x *IngressControllerRule) GetEndPort() int32 {
	if x != nil {
		return x.EndPort
	}
	return 0
}

func (x *IngressControllerRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IngressControllerRule) GetIpCidr() string {
	if x != nil {
		return x.IpCidr
	}
	return ""
}

func (x *IngressControllerRule) GetAccess() IngressControllerRuleAccess {
	if x != nil {
		return x.Access
	}
	return IngressControllerRuleAccess_IngressControllerRuleAccess_UNSPECIFIED
}

func (x *IngressControllerRule) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

var File_internal_biz_cluster_proto protoreflect.FileDescriptor

var file_internal_biz_cluster_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x69,
	0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xb9, 0x06, 0x0a, 0x07, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x16, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xd7,
	0x04, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x33, 0x0a, 0x08, 0x67,
	0x70, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x50, 0x55, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x67, 0x70, 0x75, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x70,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x6f, 0x64,
	0x5f, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6f, 0x64, 0x49, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xc4, 0x02, 0x0a, 0x15, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x4c, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x57, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x49, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x53, 0x0a, 0x0c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x46, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x44, 0x47, 0x45, 0x10, 0x03, 0x2a, 0xaa, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x2a, 0x8c, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x45, 0x52, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x10, 0x05, 0x2a, 0x42, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4d, 0x44, 0x36, 0x34, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x50, 0x55, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x50,
	0x55, 0x53, 0x70, 0x65, 0x63, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x31,
	0x30, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x56, 0x31,
	0x30, 0x30, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54,
	0x34, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x31,
	0x30, 0x30, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x50,
	0x34, 0x10, 0x05, 0x2a, 0x97, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x50, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x41, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4c, 0x41, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x10, 0x09, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x56, 0x50, 0x43, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x33,
	0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x2a, 0x95, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x06, 0x2a, 0x63, 0x0a, 0x1b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x2d, 0x72, 0x61, 0x6d, 0x62, 0x6f,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x63, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x69, 0x7a, 0x3b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_internal_biz_cluster_proto_rawDescOnce sync.Once
	file_internal_biz_cluster_proto_rawDescData = file_internal_biz_cluster_proto_rawDesc
)

func file_internal_biz_cluster_proto_rawDescGZIP() []byte {
	file_internal_biz_cluster_proto_rawDescOnce.Do(func() {
		file_internal_biz_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_biz_cluster_proto_rawDescData)
	})
	return file_internal_biz_cluster_proto_rawDescData
}

var file_internal_biz_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_internal_biz_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_internal_biz_cluster_proto_goTypes = []any{
	(ClusterType)(0),                 // 0: biz.cluster.ClusterType
	(ClusterStatus)(0),               // 1: biz.cluster.ClusterStatus
	(ClusterLevel)(0),                // 2: biz.cluster.ClusterLevel
	(NodeRole)(0),                    // 3: biz.cluster.NodeRole
	(NodeStatus)(0),                  // 4: biz.cluster.NodeStatus
	(NodeGroupType)(0),               // 5: biz.cluster.NodeGroupType
	(NodeArchType)(0),                // 6: biz.cluster.NodeArchType
	(NodeGPUSpec)(0),                 // 7: biz.cluster.NodeGPUSpec
	(ResourceType)(0),                // 8: biz.cluster.ResourceType
	(ResourceTypeKeyValue)(0),        // 9: biz.cluster.ResourceTypeKeyValue
	(IngressControllerRuleAccess)(0), // 10: biz.cluster.IngressControllerRuleAccess
	(*Cluster)(nil),                  // 11: biz.cluster.Cluster
	(*Node)(nil),                     // 12: biz.cluster.Node
	(*NodeGroup)(nil),                // 13: biz.cluster.NodeGroup
	(*CloudResource)(nil),            // 14: biz.cluster.CloudResource
	(*IngressControllerRule)(nil),    // 15: biz.cluster.IngressControllerRule
}
var file_internal_biz_cluster_proto_depIdxs = []int32{
	1,  // 0: biz.cluster.Cluster.status:type_name -> biz.cluster.ClusterStatus
	0,  // 1: biz.cluster.Cluster.type:type_name -> biz.cluster.ClusterType
	2,  // 2: biz.cluster.Cluster.level:type_name -> biz.cluster.ClusterLevel
	12, // 3: biz.cluster.Cluster.nodes:type_name -> biz.cluster.Node
	13, // 4: biz.cluster.Cluster.node_groups:type_name -> biz.cluster.NodeGroup
	14, // 5: biz.cluster.Cluster.cloud_resources:type_name -> biz.cluster.CloudResource
	15, // 6: biz.cluster.Cluster.ingress_controller_rules:type_name -> biz.cluster.IngressControllerRule
	3,  // 7: biz.cluster.Node.role:type_name -> biz.cluster.NodeRole
	4,  // 8: biz.cluster.Node.status:type_name -> biz.cluster.NodeStatus
	5,  // 9: biz.cluster.NodeGroup.type:type_name -> biz.cluster.NodeGroupType
	6,  // 10: biz.cluster.NodeGroup.arch:type_name -> biz.cluster.NodeArchType
	7,  // 11: biz.cluster.NodeGroup.gpu_spec:type_name -> biz.cluster.NodeGPUSpec
	8,  // 12: biz.cluster.CloudResource.type:type_name -> biz.cluster.ResourceType
	14, // 13: biz.cluster.CloudResource.sub_resources:type_name -> biz.cluster.CloudResource
	10, // 14: biz.cluster.IngressControllerRule.access:type_name -> biz.cluster.IngressControllerRuleAccess
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_internal_biz_cluster_proto_init() }
func file_internal_biz_cluster_proto_init() {
	if File_internal_biz_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_biz_cluster_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_biz_cluster_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_biz_cluster_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_biz_cluster_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CloudResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_biz_cluster_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IngressControllerRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_biz_cluster_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_biz_cluster_proto_goTypes,
		DependencyIndexes: file_internal_biz_cluster_proto_depIdxs,
		EnumInfos:         file_internal_biz_cluster_proto_enumTypes,
		MessageInfos:      file_internal_biz_cluster_proto_msgTypes,
	}.Build()
	File_internal_biz_cluster_proto = out.File
	file_internal_biz_cluster_proto_rawDesc = nil
	file_internal_biz_cluster_proto_goTypes = nil
	file_internal_biz_cluster_proto_depIdxs = nil
}
