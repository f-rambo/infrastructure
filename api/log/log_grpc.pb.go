// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/log/log.proto

package log

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/infrastructure/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogInterface_Ping_FullMethodName    = "/infrastructure.api.log.LogInterface/Ping"
	LogInterface_GetLogs_FullMethodName = "/infrastructure.api.log.LogInterface/GetLogs"
)

// LogInterfaceClient is the client API for LogInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogInterfaceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Msg, error)
	GetLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogRequest, LogResponse], error)
}

type logInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogInterfaceClient(cc grpc.ClientConnInterface) LogInterfaceClient {
	return &logInterfaceClient{cc}
}

func (c *logInterfaceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, LogInterface_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logInterfaceClient) GetLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogRequest, LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogInterface_ServiceDesc.Streams[0], LogInterface_GetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogRequest, LogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogInterface_GetLogsClient = grpc.BidiStreamingClient[LogRequest, LogResponse]

// LogInterfaceServer is the server API for LogInterface service.
// All implementations must embed UnimplementedLogInterfaceServer
// for forward compatibility.
type LogInterfaceServer interface {
	Ping(context.Context, *emptypb.Empty) (*common.Msg, error)
	GetLogs(grpc.BidiStreamingServer[LogRequest, LogResponse]) error
	mustEmbedUnimplementedLogInterfaceServer()
}

// UnimplementedLogInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogInterfaceServer struct{}

func (UnimplementedLogInterfaceServer) Ping(context.Context, *emptypb.Empty) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLogInterfaceServer) GetLogs(grpc.BidiStreamingServer[LogRequest, LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLogInterfaceServer) mustEmbedUnimplementedLogInterfaceServer() {}
func (UnimplementedLogInterfaceServer) testEmbeddedByValue()                      {}

// UnsafeLogInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogInterfaceServer will
// result in compilation errors.
type UnsafeLogInterfaceServer interface {
	mustEmbedUnimplementedLogInterfaceServer()
}

func RegisterLogInterfaceServer(s grpc.ServiceRegistrar, srv LogInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedLogInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogInterface_ServiceDesc, srv)
}

func _LogInterface_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogInterfaceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogInterface_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogInterfaceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogInterface_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogInterfaceServer).GetLogs(&grpc.GenericServerStream[LogRequest, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogInterface_GetLogsServer = grpc.BidiStreamingServer[LogRequest, LogResponse]

// LogInterface_ServiceDesc is the grpc.ServiceDesc for LogInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infrastructure.api.log.LogInterface",
	HandlerType: (*LogInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LogInterface_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _LogInterface_GetLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/log/log.proto",
}
