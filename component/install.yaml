---
apiVersion: v1
kind: Namespace
metadata:
  name: cloud-copilot
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-copilot-sa
  namespace: cloud-copilot
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cloud-copilot-role
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloud-copilot-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cloud-copilot-role
subjects:
  - kind: ServiceAccount
    name: cloud-copilot-sa
    namespace: cloud-copilot
---
apiVersion: v1
kind: Service
metadata:
  name: cloud-copilot-service
  namespace: cloud-copilot
spec:
  selector:
    app: cloud-copilot
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
    - protocol: TCP
      port: 9000
      targetPort: 9000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-copilot-config
  namespace: cloud-copilot
data:
  config.yaml: |
    # your config here
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cloud-copilot-pvc
  namespace: cloud-copilot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-copilot-deployment
  namespace: cloud-copilot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloud-copilot
  template:
    metadata:
      labels:
        app: cloud-copilot
    spec:
      serviceAccountName: cloud-copilot-sa
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
      containers:
        - name: cloud-copilot
          image: your-app-image:v1.0.0
          ports:
            - containerPort: 8000
            - containerPort: 9000
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
        - name: infrastructure
          image: your-app-image:v1.0.0
          ports:
            - containerPort: 9002
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          volumeMounts:
            - name: infrastructure-storage
              mountPath: /app/resource
        - name: cluster-runtime
          image: your-app-image:v1.0.0
          ports:
            - containerPort: 9003
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
      volumes:
        - name: cloud-copilot-storage
          persistentVolumeClaim:
            claimName: cloud-copilot-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: cloud-copilot
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: cloud-copilot
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:17.2
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "cloud-copilot"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "123456"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: "{{.Name}}"
  name: "{{.Name}}-cluster-info"
data:
  cluster-info: "{{.ClusterInfo}}"
