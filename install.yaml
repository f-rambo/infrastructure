---
apiVersion: v1
kind: Namespace
metadata:
  name: cluster-management
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-management-sa
  namespace: cluster-management
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-management-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-management-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-management-role
subjects:
- kind: ServiceAccount
  name: cluster-management-sa
  namespace: cluster-management
---
apiVersion: v1
kind: Service
metadata:
  name: cluster-management-service
  namespace: cluster-management
spec:
  selector:
    app: cluster-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-management-config
  namespace: cluster-management
data:
  config.yaml: |
    # your config here
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cluster-management-pvc
  namespace: cluster-management
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-management-deployment
  namespace: cluster-management
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cluster-management
  template:
    metadata:
      labels:
        app: cluster-management
    spec:
      serviceAccountName: cluster-management-sa
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: cluster-management-app
        image: your-app-image:v1.0.0
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: cluster-management-storage
          mountPath: /app/data
      volumes:
      - name: cluster-management-storage
        persistentVolumeClaim:
          claimName: cluster-management-pvc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: cluster-management
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13.4
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: mydatabase
        - name: POSTGRES_USER
          value: myuser
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi